generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model Post {
  id        String  @id @default(cuid())
  title     String
  content   String?
  published Boolean @default(false)
  authorId  String?
  author    User?   @relation(fields: [authorId], references: [id])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String    @id @default(cuid())
  sessionToken String    @unique @map("session_token")
  userId       String    @map("user_id")
  expires      DateTime
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages     Message[]
}

model Message {
  id        Int      @id @default(autoincrement())
  sessionId String   @map("session_id")
  session   Session  @relation(fields: [sessionId], references: [id])
  content   String
  createdAt DateTime @default(now())
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  posts         Post[]
  sessions      Session[]
  groups        Group[]     @relation("GroupUser")
  GroupUser     GroupUser[]
}

model Group {
  id           Int         @id @default(autoincrement())
  name         String
  password     String
  active       Boolean     @default(true)
  type         String
  users        User[]      @relation("GroupUser")
  lastWinner   Item?       @relation("GroupLastWinner", fields: [lastWinnerId], references: [id])
  lastWinnerId Int?        @unique
  GroupUser    GroupUser[]
  items        Item[]
}

model Item {
  id              Int    @id @default(autoincrement())
  type            String
  name            String
  groupId         Int    @map("group_id")
  group           Group  @relation(fields: [groupId], references: [id])
  GroupLastWinner Group? @relation("GroupLastWinner")
  wins            Int    @default(0)
}

model GroupUser {
  groupId Int   @map("group_id")
  userId  String @map("user_id")
  group   Group  @relation(fields: [groupId], references: [id])
  user    User   @relation(fields: [userId], references: [id])
  votes   Int   @default(1)

  @@id([groupId, userId])
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
